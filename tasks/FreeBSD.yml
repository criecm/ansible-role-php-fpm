---
- name: list installed php
  command: 'pkg query -x %n php'
  check_mode: False
  ignore_errors: True
  changed_when: False
  register: pkg_query_php

- name: get installed php version
  set_fact:
    installed_php_version: '{% if pkg_query_php.stdout_lines | length > 0 %}{{ pkg_query_php.stdout_lines | select("match","php[0-9][0-9]$") | first | regex_replace("php","") | int }}{% else %}{% endif %}'
    wanted_php_version: '{{ php_version | regex_replace("\.","") | int }}'

- name: upgrade php if needed
  shell: "pkg query -x %n php{{ installed_php_version }} | while read p; do echo 'upgrade $p'; pkg set -yn $p:$(echo $p|sed 's/php{{ installed_php_version }}/php{{ wanted_php_version }}/'); done"
  when: installed_php_version != '' and installed_php_version != wanted_php_version
  changed_when: upgradedphp.stdout is search("upgrade")
  register: upgradedphp

- name: pkg upgrade forced on php upgrade
  command: "pkg upgrade -fy"
  notify: restart fpm
  when: upgradedphp.changed

- name: force reinstall of pecl packages on upgrade
  shell: "pkg install -yf $(pkg query -x %n php{{ wanted_php_version }}-pecl)"
  notify: restart fpm
  when: upgradedphp.changed and pkg_query_php.stdout_lines | select("match","php[0-9][0-9]-pecl-.*") | count > 0

- name: install php
  pkgng:
    name: '{{ fpm_pkg_name }}'
    state: present
  notify: restart fpm

- name: list php packages names
  shell: 'pkg search -L name php{{ php_version | regex_replace("\.","") }} | cut -d" " -f1'
  register: php_packages_available
  check_mode: False
  ignore_errors: True
  changed_when: False

- name: install php packages
  pkgng:
    state: present
    name: '{{ item }}'
  loop: '{{ php_packages_available.stdout_lines }}'
  when: item | regex_replace("^.*-(pecl-)?","") in php_modules | default([])
  notify: restart fpm

- name: php.ini
  copy:
    src: /usr/local/etc/php.ini-production
    dest: /usr/local/etc/php.ini
    force: no
    remote_src: yes

- name: php-cli.ini
  copy:
    src: /usr/local/etc/php.ini-development
    dest: /usr/local/etc/php-cli.ini
    force: no
    remote_src: yes

- name: enable php-fpm
  lineinfile:
    line: 'php_fpm_enable="YES"'
    state: present
    regexp: '^php_fpm_enable='
    dest: /etc/rc.conf

- name: umask php-fpm
  lineinfile:
    line: 'php_fpm_umask="{{ php_fpm_umask }}"'
    state: present
    regexp: '^php_fpm_umask='
    dest: /etc/rc.conf
  when: php_fpm_umask != '022'
  notify: restart fpm

- name: login.conf umask
  blockinfile:
    dest: /etc/login.conf
    marker: '# {mark} ANSIBLE MANAGED umask for php-fpm and maintainers #'
    block: |
      php:
        :umask={{ php_fpm_umask }}:\
        :tc=default:
    validate: cap_mkdb %s
  when: php_fpm_umask != '022'
  register: loginconfumask

- name: cap_mkdb
  command: 'cap_mkdb /etc/login.conf'
  when: loginconfumask.changed
